name: 📐 Pattern Request
description: Request a new development pattern for the dev-platform library
title: "[Pattern]: "
labels: ["pattern-request", "needs-triage"]
assignees: []

body:
  - type: markdown
    attributes:
      value: |
        Thanks for requesting a new pattern! Patterns are the core of dev-platform - reusable < 50 line scripts optimized for Claude Code comprehension.
        
        🤖 **Pattern Requirements:** All patterns must include dual explanations (Technical/Simple/Connection) and be under 50 lines for Claude comprehension.

  - type: input
    id: pattern-name
    attributes:
      label: Pattern Name
      description: Suggested name for the pattern (use kebab-case)
      placeholder: "e.g., database-migration-check, api-health-monitor"
    validations:
      required: true

  - type: dropdown
    id: pattern-category
    attributes:
      label: Pattern Category
      description: Which category should this pattern belong to?
      options:
        - error-handling
        - testing
        - quality-gates
        - security
        - git-hooks
        - database
        - api-management
        - deployment
        - monitoring
        - configuration
        - documentation
        - performance
        - New category (specify in description)
    validations:
      required: true

  - type: textarea
    id: problem-description
    attributes:
      label: Problem Description (Dual Explanation)
      description: |
        Describe the problem this pattern solves using our required format:
      placeholder: |
        **Technical:** Detailed technical problem, current limitations, implementation challenges...
        **Simple:** Like when you're trying to do X but it's complicated because...
        **Connection:** This teaches developers about Y concept which applies to...
    validations:
      required: true

  - type: textarea
    id: use-cases
    attributes:
      label: Specific Use Cases
      description: Provide concrete examples of when this pattern would be used
      placeholder: |
        1. **Scenario:** Setting up a new Node.js project
           **Current problem:** Manually checking package.json, node_modules, etc.
           **With pattern:** `source patterns/nodejs/project-setup-check.sh && validate_nodejs_project`
        
        2. **Scenario:** CI/CD pipeline validation
           **Current problem:** Custom scripts in every project
           **With pattern:** Standardized validation that works everywhere
    validations:
      required: true

  - type: textarea
    id: proposed-api
    attributes:
      label: Proposed Pattern API
      description: Suggest the functions and usage interface
      render: bash
      placeholder: |
        #!/bin/bash
        # Technical: [Technical explanation of what this pattern does]
        # Simple: [Simple analogy explanation]
        # Connection: [What this teaches developers]
        
        # Main function
        pattern_main_function() {
            local input_param="$1"
            # Implementation under 50 lines total
        }
        
        # Usage example:
        # source patterns/category/pattern-name.sh
        # pattern_main_function "argument"
    validations:
      required: true

  - type: dropdown
    id: complexity-level
    attributes:
      label: Pattern Complexity
      description: How complex should this pattern be?
      options:
        - Simple (1-2 functions, basic logic)
        - Medium (2-3 functions, moderate logic)
        - Complex (multiple functions, but still < 50 lines)
    validations:
      required: true

  - type: checkboxes
    id: pattern-features
    attributes:
      label: Pattern Features
      description: What features should this pattern include?
      options:
        - label: Input validation and sanitization
        - label: Error handling with clear messages
        - label: Cross-platform compatibility (macOS/Linux)
        - label: Integration with existing patterns
        - label: Configurable behavior via environment variables
        - label: Verbose/debug output modes
        - label: Integration with git workflows
        - label: CI/CD pipeline compatibility

  - type: textarea
    id: example-usage
    attributes:
      label: Example Usage Scenarios
      description: Show how this pattern would be used in real projects
      render: bash
      placeholder: |
        # Scenario 1: Local development
        source patterns/category/pattern-name.sh
        if validate_something; then
            echo "✅ Ready to proceed"
        else
            echo "❌ Setup required"
            show_setup_help
        fi
        
        # Scenario 2: CI/CD integration
        source patterns/category/pattern-name.sh
        validate_something || exit 1
        
        # Scenario 3: Claude Code assistance
        # User: "Check if my project is properly configured"
        # Claude: sources pattern and runs validation
    validations:
      required: true

  - type: textarea
    id: success-criteria
    attributes:
      label: Pattern Success Criteria
      description: How will we know this pattern is well-designed?
      placeholder: |
        This pattern will be successful if:
        - Reduces manual work from X minutes to Y seconds
        - Eliminates common mistakes like Z
        - Can be understood by Claude in < 30 seconds
        - Works consistently across different project types
        - Has clear, actionable error messages
    validations:
      required: true

  - type: dropdown
    id: dependencies
    attributes:
      label: External Dependencies
      description: What external tools would this pattern require?
      options:
        - None (pure bash)
        - Standard Unix tools (grep, awk, sed)
        - Git (widely available)
        - Common development tools (node, python, etc.)
        - Specific tools (requires installation)
    validations:
      required: true

  - type: textarea
    id: dependency-details
    attributes:
      label: Dependency Details
      description: List any specific tools or commands this pattern would need
      placeholder: |
        Required commands:
        - git (for version control operations)
        - curl (for API health checks)
        
        Optional commands:
        - jq (for JSON processing, with fallback)
        - docker (for container detection)
        
        Validation approach:
        - Check with `command -v tool_name`
        - Provide clear error messages if missing
        - Offer installation guidance
    validations:
      required: false

  - type: checkboxes
    id: educational-value
    attributes:
      label: Educational Value
      description: How does this pattern teach transferable skills?
      options:
        - label: Demonstrates best practices applicable to other languages
        - label: Shows proper error handling techniques
        - label: Teaches configuration management concepts
        - label: Illustrates security-first development
        - label: Demonstrates testing and validation approaches
        - label: Shows automation and workflow concepts

  - type: textarea
    id: similar-tools
    attributes:
      label: Similar Tools/Patterns
      description: Are there existing tools that do something similar?
      placeholder: |
        Existing solutions:
        - Tool X does similar validation but requires complex setup
        - Framework Y has this feature but it's buried in documentation
        - Manual approach works but is error-prone and time-consuming
        
        Why a dev-platform pattern is better:
        - Standardized, simple interface
        - Claude Code optimized
        - Educational value with dual explanations
        - Composition with other patterns
    validations:
      required: false

  - type: checkboxes
    id: integration
    attributes:
      label: Pattern Integration
      description: How should this pattern work with others?
      options:
        - label: Standalone usage (doesn't require other patterns)
        - label: Composes well with error-handling patterns
        - label: Integrates with testing patterns
        - label: Works with quality-gate patterns
        - label: Enhances security patterns
        - label: Supports git-hook integration

  - type: textarea
    id: documentation-outline
    attributes:
      label: Documentation Outline
      description: What documentation should accompany this pattern?
      placeholder: |
        Required documentation:
        - Inline dual explanations (Technical/Simple/Connection)
        - Usage examples with common scenarios
        - Error handling and troubleshooting guide
        - Integration examples with other patterns
        
        Additional documentation:
        - Performance considerations
        - Security implications
        - Advanced configuration options
        - Related patterns and alternatives
    validations:
      required: false

  - type: checkboxes
    id: contribution
    attributes:
      label: Contribution Intent
      options:
        - label: I'm willing to implement this pattern
        - label: I can provide detailed requirements and examples
        - label: I can help test the pattern in real projects
        - label: I can help write documentation and examples

  - type: checkboxes
    id: research
    attributes:
      label: Background Research
      options:
        - label: I've researched existing solutions
        - label: I've tested this concept manually
        - label: I've discussed this need with other developers
        - label: I've considered the < 50 line constraint

  - type: checkboxes
    id: checklist
    attributes:
      label: Pre-submission Checklist
      options:
        - label: I searched existing patterns and this is not a duplicate
          required: true
        - label: I used the dual explanation format (Technical/Simple/Connection)
          required: true
        - label: I considered the < 50 line limit for Claude comprehension
          required: true
        - label: I provided concrete use cases and examples
          required: true
        - label: I considered how this teaches transferable skills
          required: true